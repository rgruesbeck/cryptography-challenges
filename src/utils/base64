/*
   btoa
   https://en.wikipedia.org/wiki/Base64
*/
fn btoa(s: &str) -> String {
    let char_set = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    let mut result = String::new();

    // process 3 byte buffer
    fn process_buffer(buf: [u8; 3], res: &mut String, set: &str) {
        // split bits: 3 octets -> 4 sextets
        let i0 = u8::from(buf[0] & 0b1111_1100) >> 2;
        let i1 = (u8::from(buf[0] & 0b0000_0011) << 4) + (u8::from(buf[1] & 0b1111_0000) >> 4);
        let i2 = (u8::from(buf[1] & 0b0000_1111) << 2) + (u8::from(buf[2] & 0b1100_0000) >> 6);
        let i3 = u8::from(buf[2] & 0b0011_1111);

        // iterate indexes and push chars to result
        for i in [i0, i1, i2, i3] {
            match set.chars().nth(i.into()) {
                Some(_c) => {
                    res.push(_c);
                }
                None => (),
            }
        }
    }

    let mut i = 0;
    let mut buffer = [0u8; 3];
    for byte in s.as_bytes() {
        // push byte to buffer and increment counter
        buffer[i] = *byte;
        i += 1;

        // if buffer is full OR at the last byte:
        // process and clear buffer, reset counter
        if i == 3 {
            process_buffer(buffer, &mut result, char_set);
            buffer = [0; 3];
            i = 0;
        }
    }

    result
}